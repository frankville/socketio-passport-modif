var crypto = require('crypto'),
	 mysql = require("mysql");

// Define our db creds
var db = mysql.createConnection({
    host: "localhost",
    user: "1",
    password:"1",
    database: "node"
});

// Log any errors connected to the db
db.connect(function(err){
    if (err) console.log(err)
})

// helper callback to make syncronous queries
// to database taken from http://jsfiddle.net/3rY9L/
var after = function _after(count, f) {
    var c = 0,
        results = [];

    return function _callback() {
        switch (arguments.length) {
        case 0:
            results.push(null);
            break;
        case 1: // this case is triggered when query returns some rows
            results.push(arguments[0]);
            break;
        default:
            results.push(arguments);
            break;
        }
        if (++c === count) {
            f.apply(this, results);
        }
    };
};

// Hash password utility
function generatePassword(str){
    var passwd = crypto.createHash('sha256').update(str, 'base64').digest('hex').slice(0,30);
    return passwd;
}

function validateLogin(username, password, callback){
    // encode password
    var passwd = generatePassword(password);
    db.query('SELECT id FROM user WHERE username = ? AND passwd = ?' , [username, passwd], callback);
}
exports.validateLogin = validateLogin;

/*
wt: Working Time, Type: json

json fields | table correspondence
-----------------------------------
employee    | employee.id    (INT)
branchid    | branch.id      (INT)
captcheckin | checkinpic     (BLOB)
checkin     | checkin        (INT)
captcheckout| checkoutpic    (BLOB)
checkout    | checkout       (INT)
*/

// return workingtime row inserted
exports.saveCheckin = function (socket, userId, wt){
    db.query('INSERT INTO workingtime (empid,branchid,checkinpic,checkin,checkout,checkoutpic) VALUES (?,?,?,?,?,?)', [wt.employee,wt.branchid,wt.captcheckin,wt.checkin,wt.captcheckout,wt.checkout],
    function (err, result){
        if(!err){
            var wtId = result.insertId;
            db.query("SELECT * FROM workingtime where id = ?", [wtId],
            function (err, result){
                if (!err){
                    socket.broadcast.emit("generatedCheckin", result[0]);
                    socket.emit("generatedCheckin",{"wtid" : wtId});
                }
                else
                    console.log(err);
            });
        }
        else
            console.log(err);
    });
}

// Update checkout in a working time entry matching by date and employee this way we can override 
// the use of the local database autogenerated ids that can conflict between clients
exports.saveCheckout = function (socket, userId, wt){
    db.query("update workingtime set captcheckout = ?, checkout = ? where empid = ? and day(checkin) = day(now()) and month(checkin) = month(now()) and year(checkin) = year(now())", [wt.captcheckout,wt.checkout,empid],
    function (err, result){
        if(!err){
            var wtId = result.insertId;
            db.query("SELECT * FROM workingtime where id = ?", [wtId],
            function (err, result){
                if (!err){
                    // emit to everyone the new row 
                    socket.broadcast.emit("generatedCheckout", result[0]);
                    // emit to sender th new id
                    socket.emit("generatedCheckout",{"wtid" : wtId});
                }
                else
                    console.log(err);
            });
        }
        else
            console.log(err);
    });
}

/*
au: Admin User. Type: json

json fields | table correspondence
-----------------------------------
id          | id              (INT) - just used in update
username    | user.username   (VARCHAR)
passwd      | user.passwd     (VARCHAR)
name        | name            (VARCHAR)
surname     | surname         (VARCHAR)
picture     | picture         (BLOB)
email       | email           (VARCHAR)
address     | address         (VARCHAR)
phone       | phone           (INT)
customerid  | customer.id     (INT)
userid      | user.id         (INT)
*/

// return the inserted adminUser and user rows
exports.saveAdminUser = function (socket, userId, au){
    // encode password
    var passwd = generatePassword(au.apass);
    // insert the user
    db.query("INSERT INTO user (username,passwd) VALUES (?,?)", [au.ausername, passwd], 
    function (err, result){
        if(!err){
            //now insert the admin user using the id of the inserted user
            var userId = result.insertId;
		    db.query("INSERT INTO adminuser (id,name,surname,picture,email,address,phone,customerid) VALUES (?,?,?,?,?,?,?,?)", [userId,au.aname,au.asurn,au.apicture,au.aemail,au.aaddr,au.aphone,au.custid], 
            function(err, result){
                if(!err){
                    var adminId = result.insertId;
                    var handleDatabase = after(2, function (adminUser,user) {
                        var data = {"adminUser": adminUser[1], 
                                    "user": user[1]};
                        // return to all new rows
                        socket.broadcast.emit("generatedAdminUser",data);
                        // return to sender the new user id
                        socket.emit("generatedAdminUser", {"userid": userId} );
                    })
                    // get both rows and emit to all connected clients
                    db.query("SELECT * FROM adminuser where id = ?", [adminId], handleDatabase);
                    db.query("SELECT * FROM user where id = ?", [userId], handleDatabase);
                }
                else
                    console.log(err);
            });
	    }
        else
		    console.log(err);
    });
}

/*
e: Employee, Type: json.

json fields | table correspondence
-----------------------------------
name        | name        (VARCHAR)
surname     | surname     (VARCHAR)
picture     | picture     (BLOB)
customerid  | customer.id (INT)
*/

// return employee row
exports.saveEmployee = function (socket, userId, e){
    db.query('INSERT INTO employee (name,surname,picture,customerid) VALUES (?,?,?,?)',[e.name,e.surname, e.picture, e.customerid], 
    function(err, result){
        if(!err){
            var empId = result.insertId;
            // send to clients the inserted row 
            db.query("SELECT * FROM employee where id = ?", [empId],
            function (err, result){
                if (!err){
                    socket.broadcast.emit("generatedEmployee", result[0]);
                    socket.emit("generatedEmployee", {"empid" : empId});
                }
                else
                    console.log(err);
            });
        }
        else
            console.log(err);
    });
}

/*
b: Branch, Type: json.

json fields | table correspondence
-----------------------------------
id          | id            (INT) -- just for the updates
name        | name          (VARCHAR)
phone       | phone         (INT)
address     | address       (INT)
email       | email         (VARCHAR)
customerid  | customer.id   (INT)
*/

// return inserted row in branch table
exports.saveBranch = function(socket, userId, b){
    db.query('INSERT INTO branch (name,phone,address,email,customerid) VALUES (?,?,?,?,?)',[b.name,b.phone,b.address,b.email,b.customerid], 
    function(err, result){
        if(!err){
            var branchId = result.insertId;
            // send to clients the inserted row 
            db.query("SELECT * FROM branch where id = ?", [branchId],
            function (err, result){
                if (!err){
                    socket.broadcast.emit("generatedBranch", result[0]);
                    socket.emit("generatedBranch", {"branchid" : branchId})
                }
                else
                    console.log(err);
            });
        }
        else
            console.log(err);
    });   
}

/*
bpa: Branches per Admin. type: json

json fields | table correspondence
-----------------------------------
adminId     | admin.id  (INT)
brnachId    | branch.id (INT)
*/

// return the row inserted in branches per admin
exports.saveBranchesPerAdmin = function (socket, userId, bpa){
    db.query('INSERT INTO branchesperadmin (adminid,branchid) VALUES (?,?)',[bpa.adminid, bpa.branchid], 
    function(err, result){
        if(!err){
            // send to clients the inserted row 
            db.query("SELECT * FROM branchesperadmin where adminid = ? and branchid = ?", [bpa.adminid, bpa.branchid],
            function (err, result){
                if (!err){
                    socket.broadcast.emit("generatedBranchesPerAdmin", result[0]);
                }
                else
                    console.log(err);
            });
        }
        else
            console.log(err);
    });
}

// return the rows in a json array
exports.broadcastAllTodaysTuples = function(socket, userId, customerid){
    var handleDatabase = after(5, function (adminUsers,branches,branchesperadmin,employees,workingtime) {
        var data = {"adminUsers": adminUsers[1], 
                    "branches": branches[1], 
                    "branchesPerAdmin": branchesperadmin[1], 
                    "employees": employees[1],
                    "workingtime": workingtime[1]};
        socket.emit("write",data);
    });

    // query each database for tuples inserted today
    db.query("SELECT * FROM adminuser where customerid = ?", [customerid], handleDatabase);
    db.query("SELECT * FROM branch where customerid = ?", [customerid], handleDatabase);
    db.query("SELECT branchesperadmin.* FROM branch inner join branchesperadmin on branch.id = branchesperadmin.branchid where customerid = ?", [customerid], handleDatabase);
    db.query("SELECT * FROM employee where customerid = ?", [customerid], handleDatabase);
    db.query("SELECT workingtime.* FROM employee inner join workingtime on employee.id = workingtime.empid where day(checkin) = day(now()) and month(checkin) = month(now()) and year(checkin) = year(now()) and customerid = ?", [customerid], handleDatabase);
}
